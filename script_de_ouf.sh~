#$1 = infile
#$2 = outfile
#$3 = cpu
#$4 = /path_to/RM_library.fasta

mkdir $2

echo '####################################'
echo '#                                  #'
echo '#         SCRIPT DE OUF !!!        #'
echo '#                                  #'
echo '####################################'

echo ''

echo 'Genomic repeats assembly/annotation/quantification pipeline using TRINITY - version 0.1'

echo ''

echo 'Let'\''s go...'

echo ''
##################TRINITY###############################
echo '### TRINITY to assemble repeats ###'

export PATH=/usr/remote/jdk1.6.0_06/bin/java:$PATH

/usr/remote/trinityrnaseq_r2013_08_14/Trinity.pl --seqType fa --JM 10G --single $1 --CPU $3 --min_glue 0 --output $2

echo 'Done'

### rename fasta header according to old Trinity
sed -i 's/>c/>comp/g' $2/Trinity.fasta



#####################REPEATMASKER########################
echo '### REPEATMASKER to anotate contigs ###'

repeatmasker -pa $3 -s -lib $4 $2/Trinity.fasta

mkdir $2/Annotation

cat $2/Trinity.fasta.out | sort -k 5,5 -k 1,1nr | sort -u -k5,5 | awk '{print$5"\t"$10"\t"$11}'> $2/Annotation/one_RM_hit_per_Trinity_contigs ## Parse le fichier .out de RM et garde le best hit par Trinity contig

echo 'Done'


echo '### Making contigs annotation from RM ###'

# fais une liste de fichier headers pour aller récupérer les contigs
cat $2/Annotation/one_RM_hit_per_Trinity_contigs | grep 'LTR' | awk '{print$1}' > $2/Annotation/LTR.headers ### Ã  utiliser pour trier et faire des fichier de grep par catÃ©gorie pour l'alignement ensuite.
cat $2/Annotation/one_RM_hit_per_Trinity_contigs | grep 'LINE' | awk '{print$1}' > $2/Annotation/LINE.headers ### Ã  utiliser pour trier et faire des fichier de grep par catÃ©gorie pour l'alignement ensuite.
cat $2/Annotation/one_RM_hit_per_Trinity_contigs | grep 'SINE' | awk '{print$1}' > $2/Annotation/SINE.headers ### Ã  utiliser pour trier et faire des fichier de grep par catÃ©gorie pour l'alignement ensuite.
cat $2/Annotation/one_RM_hit_per_Trinity_contigs | grep 'ClassII' | awk '{print$1}' > $2/Annotation/ClassII.headers ### Ã  utiliser pour trier et faire des fichier de grep par catÃ©gorie pour l'alignement ensuite.
cat $2/Annotation/one_RM_hit_per_Trinity_contigs | grep 'Low_complexity' | awk '{print$1}' > $2/Annotation/LowComp.headers ### Ã  utiliser pour trier et faire des fichier de grep par catÃ©gorie pour l'alignement ensuite.
cat $2/Annotation/one_RM_hit_per_Trinity_contigs | grep 'Simple_repeat' | awk '{print$1}' > $2/Annotation/Simple.headers ### Ã  utiliser pour trier et faire des fichier de grep par catÃ©gorie pour l'alignement ensuite.

# récupère et annote les contigs de Trinity.fasta selon les meilleurs hits RM
perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/LTR.headers $2/Trinity.fasta | sed 's/>comp/>LTR_comp/g' > $2/Annotation/LTR_annoted.fasta
perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/LINE.headers $2/Trinity.fasta | sed 's/>comp/>LINE_comp/g' > $2/Annotation/LINE_annoted.fasta
perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/SINE.headers $2/Trinity.fasta | sed 's/>comp/>SINE_comp/g' > $2/Annotation/SINE_annoted.fasta
perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/ClassII.headers $2/Trinity.fasta | sed 's/>comp/>ClassII_comp/g' > $2/Annotation/ClassII_annoted.fasta
perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/LowComp.headers $2/Trinity.fasta | sed 's/>comp/>LowComp_comp/g' > $2/Annotation/LowComp_annoted.fasta
perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/Simple.headers $2/Trinity.fasta | sed 's/>comp/>Simple_repeats_comp/g' > $2/Annotation/Simple_repeats_annoted.fasta

cat $2/Annotation/*.headers > $2/Annotation/all_annoted.head
perl -ne 'if(/^>(\S+)/){$c=!$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/all_annoted.head $2/Trinity.fasta | sed 's/>comp/>na_comp/g' > $2/Annotation/unannoted.fasta

cat $2/Annotation/*_annoted.fasta > $2/Annotation/annoted.fasta

echo 'Done'

####################TRF###########################
echo '### TRF to annotate Tandem Repeats ###'

/panhome/goubert/trf407b.linux64 $2/Annotation/unannoted.fasta 2 7 7 80 10 50 500 -f -d -h

cat $2/unannoted.fasta.*.dat |  sed '/^$/d' > $2/Annotation/dat_without_jumps
cat $2/Annotation/dat_without_jumps | grep -B 2 '[ACTG]' | grep 'Sequence' | awk '{print $2}' | sed 's/na_//g' > $2/Annotation/found_tandem_repeats.header
cat $2/Annotation/found_tandem_repeats.header | sed 's/comp/na_comp/g' > $2/Annotation/found_TR_fmtd

perl -ne 'if(/^>(\S+)/){$c=$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/found_tandem_repeats.header $2/Trinity.fasta | sed 's/>comp/>Tandem_Repeat_comp/g' > $2/Annotation/Tandem_Rep_annoted.fasta
perl -ne 'if(/^>(\S+)/){$c=!$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/Annotation/found_TR_fmtd $2/Annotation/unannoted.fasta > $2/Annotation/unannoted_final.fasta

echo 'Done'

##################BLAST############################
echo '### Blast 1 : raw reads against annoted repeats ###'

mkdir $2/blast_out

cat $2/Annotation/annoted.fasta $4 > $2/blast_out/blast1_db.fasta
/usr/remote/ncbi-blast-2.2.29+/bin/makeblastdb -in $2/blast_out/blast1_db.fasta -out $2/blast_out/blast1_db.fasta -dbtype 'nucl'
echo 'blasting...'
/usr/remote/ncbi-blast-2.2.29+/bin/blastn -query $1 -db $2/blast_out/blast1_db.fasta -task dc-megablast -out $2/blast_out/reads_vs_annoted.blast.out -outfmt 6 -perc_identity 80 -num_threads $3

echo 'blast1 done'

echo 'Paring blast1 output...'

cat $2/blast_out/reads_vs_annoted.blast.out | sort -k1,1 -k12,12nr -k11,11n | sort -u -k1,1 > $2/blast_out/sorted.reads_vs_annoted.blast.out

echo 'Parsing done'

echo 'Selecting non-matching reads for blast2'

cat $2/blast_out/sorted.reads_vs_annoted.blast.out | awk '{print$1}' > $2/blast_out/matching_reads.headers
perl -ne 'if(/^>(\S+)/){$c=!$i{$1}}$c?print:chomp;$i{$_}=1 if @ARGV' $2/blast_out/matching_reads.headers $1 > $2/blast_out/unmatching_reads1.fasta

echo '### Blast 2 : raw reads against unannoted repeats ###'
/usr/remote/ncbi-blast-2.2.29+/bin/makeblastdb -in $2/Annotation/unannoted_final.fasta -out $2/blast_out/blast2_db.fasta -dbtype 'nucl'

echo 'blasting...'

/usr/remote/ncbi-blast-2.2.29+/bin/blastn -query $2/blast_out/unmatching_reads1.fasta -db $2/blast_out/blast2_db.fasta -task dc-megablast -out $2/blast_out/reads_vs_unannoted.blast.out -outfmt 6 -perc_identity 80 -num_threads $3

echo 'blast2 done'
echo 'Paring blast2 output...'
cat $2/blast_out/reads_vs_unannoted.blast.out | sort -k1,1 -k12,12nr -k11,11n | sort -u -k1,1 > $2/blast_out/sorted.reads_vs_unannoted.blast.out

echo 'Parsing done'

##############Estimation of Repeats abundance#######

echo '### Estimation of Repeat content from blast outputs ###'

echo "LTR" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'LTR' >> $2/Counts.txt
echo "LINE" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'LINE' >> $2/Counts.txt
echo "SINE" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'SINE' >> $2/Counts.txt
echo "ClassII" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'ClassII' >> $2/Counts.txt
echo "Low Complexity" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'LowComp' >> $2/Counts.txt
echo "Simple repeats" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'Simple_repeats' >> $2/Counts.txt
echo "Tandem repeats" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_annoted.blast.out | grep -c 'Tandem_' >> $2/Counts.txt
echo "NA" >> $2/Counts.txt
cat $2/blast_out/sorted.reads_vs_unannoted.blast.out | wc -l >> $2/Counts.txt

echo 'Counts will be found at ./Counts.txt'

###########Building graph of Repeats families#####
echo '### OK, lets build the repeats families abudances graph ###'
echo ''
echo '### Blast 3 : raw reads against all repeats contigs ###'

/usr/remote/ncbi-blast-2.2.29+/bin/makeblastdb -in $2/Trinity.fasta -out $2/Trinity.fasta -dbtype 'nucl'
echo 'blasting...'
/usr/remote/ncbi-blast-2.2.29+/bin/blastn -query $1 -db $2/Trinity.fasta -task dc-megablast -out $2/blast_out/reads_vs_Trinity.fasta.blast.out -outfmt 6 -perc_identity 80 -num_threads $3

echo 'Paring blast3 output...'

cat $2/blast_out/reads_vs_Trinity.fasta.blast.out | sort -k1,1 -k12,12nr -k11,11n | sort -u -k1,1 > $2/blast_out/sorted.reads_vs_Trinity.fasta.blast.out

cat $2/blast_out/sorted.reads_vs_Trinity.fasta.blast.out | awk '{print $2"\t"$3}' | sed 's/_/\t/g' > $2/Reads_to_components_Rtable.txt

echo 'Parsing done'

#Drawing graphs 
echo 'Drawing reads to component graphs...'
Rscript graph.R
echo 'Done'


echo ''

echo '########################'
echo '#     It worked !!!    #'
echo '#   see you soon !!!   #'
echo '########################'






